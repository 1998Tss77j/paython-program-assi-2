# -*- coding: utf-8 -*-
"""paython basic assignment=2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15IL455jd273NpIbSqID-Eo0xT0lzcjRK

1.What are the two values of the Boolean data type? How do you write them?

ANS=

The Boolean data type in Python has two possible values: True and False. These values represent the two binary states of logic, where True represents "true" or "on," and False represents "false" or "off." It is important to note that the initial letter of each value must be capitalized in Python, as it is case-sensitive.
"""

# Assigning Boolean values to variables
my_bool_true = True
my_bool_false = False

# Using Boolean values in expressions
result1 = True and False
result2 = True or False
result3 = not True

# Printing Boolean values
print(my_bool_true)
print(my_bool_false)

"""2. What are the three different types of Boolean operators?

ANS=

The three different types of Boolean operators are:

AND Operator: Denoted by the keyword and. It returns True only if both operands are True, otherwise, it returns False.

OR Operator: Denoted by the keyword or. It returns True if at least one of the operands is True, otherwise, it returns False.

NOT Operator: Denoted by the keyword not. It returns the opposite Boolean value of the operand. If the operand is True, not will return False, and if the operand is False, not will return True.

3. Make a list of each Boolean operator&#39;s truth tables (i.e. every possible combination of Boolean
values for the operator and what it evaluate ).
"""

# Truth table for AND Operator
print("AND Operator Truth Table:")
print("True and True  ->", True and True)
print("True and False ->", True and False)
print("False and True ->", False and True)
print("False and False->", False and False)

# Truth table for OR Operator
print("\nOR Operator Truth Table:")
print("True or True   ->", True or True)
print("True or False  ->", True or False)
print("False or True  ->", False or True)
print("False or False ->", False or False)

# Truth table for NOT Operator
print("\nNOT Operator Truth Table:")
print("not True  ->", not True)
print("not False ->", not False)

"""4. What are the values of the following expressions?
(5 &gt; 4) and (3 == 5)
not (5 &gt; 4)
(5 &gt; 4) or (3 == 5)
not ((5 &gt; 4) or (3 == 5))
(True and True) and (True == False)
(not False) or (not True)
"""

# Expression 1
exp1 = (5 > 4) and (3 == 5)
# Result: False

# Expression 2
exp2 = not (5 > 4)
# Result: False

# Expression 3
exp3 = (5 > 4) or (3 == 5)
# Result: True

# Expression 4
exp4 = not ((5 > 4) or (3 == 5))
# Result: False

# Expression 5
exp5 = (True and True) and (True == False)
# Result: False

# Expression 6
exp6 = (not False) or (not True)
# Result: True

# Printing the results
print("Expression 1:", exp1)
print("Expression 2:", exp2)
print("Expression 3:", exp3)
print("Expression 4:", exp4)
print("Expression 5:", exp5)
print("Expression 6:", exp6)

"""5. What are the six comparison operators?

ANS=
The six comparison operators in Python are used to compare values and produce Boolean results (True or False). Here are the six comparison operators:

Equal to: ==
Checks if two values are equal.

Not equal to: !=
Checks if two values are not equal.

Greater than: >
Checks if the value on the left is greater than the value on the right.

Less than: <
Checks if the value on the left is less than the value on the right.

Greater than or equal to: >=
Checks if the value on the left is greater than or equal to the value on the right.

Less than or equal to: <=
Checks if the value on the left is less than or equal to the value on the right.

These operators are frequently used in conditional statements, loops, and various other programming constructs to compare values and make decisions based on the comparison results.

6. How do you tell the difference between the equal to and assignment operators?Describe a
condition and when you would use one.

ANS=
In Python, the equal to (==) operator and the assignment (=) operator serve different purposes:

Equal to (==) operator:
The equal to operator (==) is a comparison operator used to check if two values are equal. It returns a Boolean value (True or False) based on the comparison result.
"""

x = 5
y = 5
if x == y:
    print("x is equal to y")  # This will be printed since x is equal to y

# Using the equal to operator
a = 5
b = 10
if a == b:
    print("a is equal to b")
else:
    print("a is not equal to b")  # This will be printed because a is not equal to b

# Using the assignment operator
x = 42
y = x  # Assigns the value of x (42) to y
print(y)  # Output: 42

"""7. Identify the three blocks in this code:
spam = 0
if spam == 10:
print(&#39;eggs&#39;)
if spam &gt; 5:
print(&#39;bacon&#39;)
else:
print(&#39;ham&#39;)
print(&#39;spam&#39;)
print(&#39;spam&#39;)
"""

spam = 0

if spam == 10:
    # First block starts here
    print('eggs')
    # First block ends here

if spam > 5:
    # Second block starts here
    print('bacon')
    # Second block ends here
else:
    # Third block starts here
    print('ham')
    # Third block ends here

# Code outside any block
print('spam')
print('spam')

"""8. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints
Greetings! if anything else is stored in spam.
"""

spam = 1

if spam == 1:
    print("Hello")
elif spam == 2:
    print("Howdy")
else:
    print("Greetings!")

"""9.If your programme is stuck in an endless loop, what keys youâ€™ll press?

ANS=
If your program is stuck in an endless loop and you want to stop its execution, you can press the following key combinations depending on your operating system:

Windows: Press Ctrl + C
macOS or Linux: Press Ctrl + C
Jupyter Notebook or IPython: Press I + I (the letter 'i' twice)
These key combinations will send an interrupt signal to the running program, causing it to stop the execution of the current loop or task and terminate the program. It allows you to regain control and stop the program from running indefinitely.

10. How can you tell the difference between break and continue?

ans=

In Python, break and continue are two control flow statements used in loops (e.g., for and while) to alter the loop's behavior. They serve different purposes:

break statement:
The break statement is used to terminate the loop prematurely when a certain condition is met. When the break statement is executed, it immediately exits the loop, and the program continues with the next statement after the loop.
Example:
"""

for i in range(1, 6):
    if i == 3:
        break
    print(i)

"""continue statement:
The continue statement is used to skip the current iteration of the loop and proceed to the next iteration. When the continue statement is encountered, the remaining statements in the loop are skipped, and the loop moves on to the next iteration.
Example:


"""

for i in range(1, 6):
    if i == 3:
        continue
    print(i)

"""11. In a for loop, what is the difference between range(10), range(0, 10), and range(0, 10, 1)?"""

# Using range(10)
print("Using range(10):")
for i in range(10):
    print(i, end=' ')
print("\n")

# Using range(0, 10)
print("Using range(0, 10):")
for i in range(0, 10):
    print(i, end=' ')
print("\n")

# Using range(0, 10, 1)
print("Using range(0, 10, 1):")
for i in range(0, 10, 1):
    print(i, end=' ')
print("\n")